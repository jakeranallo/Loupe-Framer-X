'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _dompurify = require('dompurify');

var _dompurify2 = _interopRequireDefault(_dompurify);

var _icons = require('./icons.json');

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// for now this icons json is generated via the build script from latest feather
// TODO: automatically generate this JSON via this repo's build script


var IconInner = function (_PureComponent) {
  _inherits(IconInner, _PureComponent);

  function IconInner() {
    _classCallCheck(this, IconInner);

    return _possibleConstructorReturn(this, (IconInner.__proto__ || Object.getPrototypeOf(IconInner)).apply(this, arguments));
  }

  _createClass(IconInner, [{
    key: 'createMarkup',
    value: function createMarkup(markup) {
      // sanitize markup first:
      var sanitizedMarkup = _dompurify2.default.sanitize(markup);
      // now do the weird thing for dangerouslySetInnerHTML
      return { __html: sanitizedMarkup };
    }
  }, {
    key: 'render',
    value: function render() {
      // <g> is just a wrapper it does nothing except let me use valid JSX markup
      // icons are based on generated icons.json from feather lib
      var icon = this.props.icon;

      var iconMarkup = _icons2.default[icon];

      if (iconMarkup) {
        // i didnt want to use dangerouslySetInnerHTML
        // but i am sanitizing the markup first
        // and this way I can just use the JSON to spit out SVG
        // another possible option is to use the feather lib functions
        // which create the SVG files, then an SVG loader could be used.
        // i am open to this for a future version.
        return _react2.default.createElement('g', { dangerouslySetInnerHTML: this.createMarkup(iconMarkup) });
      }
      return null;
    }
  }]);

  return IconInner;
}(_react.PureComponent);

IconInner.propTypes = {
  icon: _propTypes2.default.string.isRequired
};

exports.default = IconInner;